# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/jllemusc/Finance/blob/main/Project2_Money_Flow_Index.ipynb

Description: This program uses the Money Flow Index to determine when to buy or sell a stock
Libraries
"""

!pip3 install yfinance
import yfinance as yf
import numpy as np 
import pandas as pd
from pandas_datareader import data as pdr
import matplotlib.pyplot as plt
yf.pdr_override() 
import datetime as dt 
import warnings
plt.style.use('fivethirtyeight')
warnings.filterwarnings('ignore')

tick = yf.Ticker('AY') # ADA-USD # EURUSD%3DX # EURGBP%3DX # HG=F #CAKE  'CL=F GC=F HG=F PA=F SB=F ALI=F
hist = tick.history(period='360d')[['High','Low','Close','Volume']]

"""Visually see the data"""

plt.figure(figsize=(12,5))
plt.title('Close price',fontsize = 15)
plt.plot(hist['Close'],label = 'Price')
plt.xlabel('Date', fontsize = 10)
plt.ylabel('Close Price $', fontsize = 10)
plt.legend(hist.columns.values, loc='upper left')
plt.xticks(rotation=45, fontsize = 8)
plt.show

"""Calculate the typical price"""

typical_price= (hist['Close']+ hist['High']+hist['Low'])/3
typical_price

"""Get the period"""

period = 14

"""Calculate the money flow"""

money_flow = typical_price * hist['Volume']

"""Get all the positive and negative money flows"""

positive_flow = []
negative_flow = []

for i in range(1, len(typical_price)):
  if typical_price[i]> typical_price[i-1]:
    positive_flow.append(money_flow[i-1])
    negative_flow.append(0)
  elif typical_price[i]< typical_price[i-1]:
    negative_flow.append(money_flow[i-1])
    positive_flow.append(0)
  else:
    negative_flow.append(0)
    positive_flow.append(0)

"""Get all the positive an negatie money flows with time period"""

positive_mf = []
negative_mf = []

for i in range(period-1,len(positive_flow)):
  positive_mf.append(sum(positive_flow[i+ 1- period : i+1]))
for i in range(period-1,len(negative_flow)):
  negative_mf.append(sum(negative_flow[i+ 1- period : i+1]))

"""Calculate the money flow index"""

mfi = 100 * np.array(positive_mf) / (np.array(positive_mf) + np.array(negative_mf))

"""Visually show the MFI"""

df2 = pd.DataFrame()
df2['MFI'] = mfi
#Create Plot
plt.figure(figsize=(12,5))
plt.title('Money Flow Index',fontsize = 15)
plt.plot(df2['MFI'], label = 'MFI')
plt.ylabel('MFI Values', fontsize = 10)
plt.axhline(10, linestyle= '--', color = 'orange')
plt.axhline(20, linestyle= '--', color = 'blue')
plt.axhline(80, linestyle= '--', color = 'blue')
plt.axhline(90, linestyle= '--', color = 'orange')
plt.show

new_df = pd.DataFrame()
new_df = hist[period:]
new_df ['MFI'] = mfi
new_df.head(2)

"""Create a function to get the buy and sell signals"""

def get_signal(data, high, low):
  buy_signal = []
  sell_signal = []

  for i in range (len(data['MFI'])):
    if data['MFI'][i]> high:
      buy_signal.append(np.nan)
      sell_signal.append(data['Close'][i])
    elif data['MFI'][i] < low:
      buy_signal.append(data['Close'][i])
      sell_signal.append(np.nan) 
    else:
      sell_signal.append(np.nan)
      buy_signal.append(np.nan)
  return (buy_signal,sell_signal)

"""Add new columns (Buy and Sell)"""

new_df['Buy'] = get_signal(new_df, 80,20)[0]
new_df['Sell'] = get_signal(new_df, 80,20)[1]

"""Plot the data"""

plt.figure(figsize=(12,5))
plt.title('MFI',fontsize = 17)
plt.plot(new_df['Close'],label = 'Close Price', alpha = 0.5, linewidth= 0.7)
plt.scatter(new_df.index, new_df['Buy'], color = 'green', label = 'Buy Signal', marker='^', alpha =1, s = 250)
plt.scatter(new_df.index, new_df['Sell'], color = 'red', label = 'Sell Signal', marker='v', alpha =1, s = 250 )
plt.xlabel('Date', fontsize = 10)
plt.ylabel('Close Price $', fontsize = 10)
plt.legend(loc='upper left')
plt.xticks(rotation=45, fontsize = 8)
plt.show

new_df.describe()