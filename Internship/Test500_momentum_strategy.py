# -*- coding: utf-8 -*-
"""Momentum_Strategy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DtUjnfbC1zyO6zsAYZI9aeHCJj8nZpWR

# **Momentum strategy**
** **

*   Momentum investing is a trading strategy in which investors buy securities that are rising and sell them when they look to have peaked.
*   The goal is to work with volatility by finding buying opportunities in short-term uptrends and then sell when the securities start to lose momentum.

*   Then, the investor takes the cash and looks for the next short-term uptrend, or buying opportunity, and repeats the process.
*   Skilled traders understand when to enter into a position, how long to hold it for, and when to exit; they can also react to short-term, news-driven spikes or selloffs.

*   Risks of momentum trading include moving into a position too early, closing out too late, and getting distracted and missing key trends and technical deviations. 

source: https://www.investopedia.com/trading/introduction-to-momentum-trading/

---


<div class="alert alert-block alert-info">

- **Name:**  Jorge Leonardo Lemus

- **Email:**  leonardolemus@gmail.com

</div>
---

Import the right libraries for this project.
"""

import yfinance as yf
import numpy as np 
import pandas as pd
from pandas_datareader import data as pdr
import matplotlib.pyplot as plt
yf.pdr_override() 
import datetime as dt 
from dateutil.relativedelta import relativedelta

"""For this strategy we will use the Dow Jones Industrial Average

The Dow Jones Industrial Average (DJIA), Dow Jones, or simply the Dow (/ˈdaʊ/), is a price-weighted measurement stock market index of 30 prominent companies listed on stock exchanges in the United States.

source: https://en.wikipedia.org/wiki/Dow_Jones_Industrial_Average

"""

#Get tiickers symbols the DJI
table = pd.read_html('https://www.investopedia.com/terms/d/djia.asp')[0]

table.columns

#We take the Tickers in a list
tick = table[('Dow Jones Industrial Average Components',    'Symbol')].tolist()

"""For this exercise, the period taken is from January 1st, 2020 to March 1st, 2022."""

#get prices for the dji for the last year
start = dt.datetime(2021,1,1)
end = dt.datetime(2022,3,1)

"""The information will remain in a dataframe called ind_data."""

ind_data = pd.DataFrame()
for t in tick:
  ind_data[t] = pdr.DataReader(t,data_source='yahoo', start= start, end =end )['Adj Close']
print(ind_data.head())

"""Now we calculate our monthly returns for every tick."""

#Calculate returns 
mtl_ret = ind_data.pct_change().resample('M').agg(lambda x:(x+1).prod()-1)

"""In the table mtl_ret we have the monthly returns."""


"""We calculate the average returns of every company during the last 11 months."""

#calculate returns over the past 11 months
past_11 = (mtl_ret+1).rolling(11).apply(np.prod)-1

index_list = [i for i, item in enumerate(past_11.index)]

reference_dict = dict(zip(index_list, past_11.index))

for key in reference_dict.keys():
  print(key, reference_dict[key])

"""In this part we can see the returns during the study time period. """

past_11[-13:-5]

formation = reference_dict[len(reference_dict)-2]


#loop thru reference_dict, match with formation
for key in reference_dict.keys():
  if formation == reference_dict[key]:
    previous_month = reference_dict[key-1]
    
#get the data one index prior
#use that timedata as previous month

end_measurement = formation - previous_month#relativedelta(month=1) 
print(relativedelta(month=1))
print(end_measurement)

formation

end_measurement
print(past_11.columns)

index_list = [i for i, item in enumerate(past_11.index)]

reference_dict = dict(zip(index_list, past_11.index))

for key in reference_dict.keys():
  print(key, reference_dict[key])


#print(end_measurement)
#df.index[df['']]]

print(past_11.loc[end_measurement == past_11.index].index)

  
#print(past_11.loc[end_measurement])

ret_12 = past_11.loc[previous_month]

ret_12 = ret_12.reset_index()

ret_12['quintile'] = pd.qcut(ret_12.iloc[:,1],5,labels=False)


winners = ret_12[ret_12.quintile==4]
winners1 = ret_12[ret_12.quintile==1]
losers = ret_12[ret_12.quintile==0]

#this is the result and we advi....
print(winners['index'].tolist())
winners

losers

ind_data.columns.isin(winners.iloc[:,0])

winnerret = mtl_ret.loc[formation + relativedelta(month= 1), ind_data.columns.isin(winners.iloc[:,0])]
loserret = mtl_ret.loc[formation + relativedelta(month= 1), ind_data.columns.isin(losers.iloc[:,0])]

winnerret

loserret

Momentumprofit = winnerret.mean() - loserret.mean()
Momentumprofit

